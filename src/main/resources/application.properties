# Desativa o cache de "prepared statements" para ser compatível com o PgBouncer/Pooler do Supabase
spring.datasource.url=${DB_URL}?prepareThreshold=0

# Otimização do Pool de Conexões HikariCP
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email

# Configuração do Servidor
server.port=8080

# Configuração do DataSource para PostgreSQL (usando variáveis de ambiente)
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Configuração do JPA
# 'update' irá criar/atualizar as tabelas automaticamente baseado nas suas Entidades (@Entity)
# Para produção mais robusta, 'validate' ou ferramentas como Flyway/Liquibase são recomendadas.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true 

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Configuração do JWT (JSON Web Token)
# GERE UMA CHAVE SECRETA LONGA E ALEATÓRIA PARA PRODUÇÃO
# Ex: use um gerador online de senhas com 64 caracteres
jwt.secret=${JWT_SECRET:super-secret-key-for-local-dev-only-change-in-prod}
# Tempo de expiração do token em milissegundos (24 horas)
jwt.expiration=86400000